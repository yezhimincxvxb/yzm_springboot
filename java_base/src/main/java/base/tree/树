### 二叉树（Binary tree）是树形结构的一个重要类型。
许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。
二叉树特点是每个节点最多只能有两棵子树，且有左右之分。
二叉树是n个有限元素的集合，该集合或者为空、或者由一个称为根（root）的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成，是有序树。
当集合为空时，称该二叉树为空二叉树。在二叉树中，一个元素也称作一个节点。

## 定义：
二叉树（binary tree）是指树中节点的度(度：子节点数目)不大于2的有序树，它是一种最简单且最重要的树。
二叉树的递归定义为：二叉树是一棵空树，或者是一棵由一个根节点和两棵互不相交的，分别称作根的左子树和右子树组成的非空树；左子树和右子树又同样都是二叉树。

## 基本形态：
二叉树是递归定义的，其节点有左右子树之分，逻辑上二叉树有五种基本形态：
1、空二叉树；
2、只有一个根节点的二叉树；
3、只有左子树；
4、只有右子树；
5、完全二叉树。

## 特殊类型：
满二叉树：如果一棵二叉树只有度为0的节点和度为2的节点，并且度为0的节点在同一层上，则这棵二叉树为满二叉树。
完全二叉树：深度为k，有n个节点的二叉树当且仅当其每一个节点都与深度为k的满二叉树中编号从1到n的节点一一对应时，称为完全二叉树。
完全二叉树的特点是叶子节点只可能出现在层序最大的两层上，并且某个节点的左分支下子孙的最大层序与右分支下子孙的最大层序相等或大1。

## 相关术语：
节点：包含一个数据元素及若干指向子树分支的信息。
节点的度：一个节点拥有子树的数目称为节点的度。
叶子节点：也称为终端节点，没有子树的节点或者度为零的节点。
(非叶子节点)分支节点：也称为非终端节点，度不为零的节点称为非终端节点。
节点的层次：从根节点开始，根节点为第1层，根节点的子节点为第2层，依此类推。
节点深度：对于任意节点n,n的深度是从根节点到该节点的边数。根节点深度为0
节点高度：对于任意节点n,n的深度是从该节点到叶子节点的边数。叶子节点高度为0
树的深度：也称为树的高度，树中所有节点的层次最大值称为树的深度。
有序树：如果树中各棵子树的次序是有先后次序，则称该树为有序树。
无序树：如果树中各棵子树的次序没有先后次序，则称该树为无序树。
森林：由m（m≥0）棵互不相交的树构成一片森林。如果把一棵非空的树的根节点删除，则该树就变成了一片森林，森林中的树由原来根节点的各棵子树构成。

## 二叉树性质：
性质1：二叉树的第i层上至多有 2^(i-1) 个节点。
性质2：深度为h的二叉树中至多含有2^h-1个节点、至少h个节点
性质3：若在任意一棵二叉树中，有n0个叶子节点，有n2个度为2的节点，则必有n0=n2+1。
性质4：具有n个节点的满二叉树深度为：h = floor(log2n)+1。
性质5：若对一棵有n个节点的完全二叉树进行顺序编号（1≤i≤n），那么，对于编号为i（i≥1）的节点：
当i=1时，该节点为根，它无父节点。
当i>1时，该节点的父节点的编号为i/2。
若2i≤n，则有编号为2i的左节点，否则没有左节点。
若2i+1≤n，则有编号为2i+1的右节点，否则没有右节点。

### 二叉查找树(二叉排序树)：
## 定义
一棵空树，或者是具有下列性质的二叉树：
（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；
（2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值；
（3）左、右子树也分别为二叉排序树；

### AVL树：
AVL树是最先发明的自平衡二叉查找树。在AVL树中任何节点的两个子树的高度最大差别为1，所以它也被称为高度平衡树。
增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。

## 特点
AVL树本质上还是一棵二叉搜索树，它的特点是：
1.本身首先是一棵二叉搜索树。
2.带有平衡条件：每个结点的左右子树的高度之差的绝对值（平衡因子）最多为1。
也就是说，AVL树，本质上是带了平衡功能的二叉查找树（二叉排序树，二叉搜索树）。

### 红黑树
红黑树（Red Black Tree） 是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。
红黑树是一种特化的AVL树（平衡二叉树），都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。
红黑树是一种平衡二叉查找树的变体，它的左右子树高差有可能大于 1，所以红黑树不是严格意义上的平衡二叉树（AVL），但 对之进行平衡的代价较低， 其平均统计性能要强于 AVL。

## 特征
每个节点非红即黑；
根节点总是黑色的；
每个叶子节点都是黑色的空节点（NIL节点）；
如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；
从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。

红黑树的应用 ：TreeMap、TreeSet以及JDK1.8的HashMap底层都用到了红黑树。

###
B-树：多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点；所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；
B+树：在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；
B*树：在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3。








