适配器模式：
    通过增加一个新的适配器类来解决接口不兼容的问题，使得原本没有任何关系的类可以协同工作。
    将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构。

桥接模式：
    将抽象部分与它的实现部分分离，使它们都可以独立地变化。
    它是用组合关系代替继承关系来实现的，从而降低了抽象和实现两个可变维度的耦合性，

装饰者模式：
    允许向一个现有的对象添加新的功能，同时又不改变其结构。
    动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。

代理模式：
    为其他对象提供一种代理以控制对这个对象的访问。

