ConcurrentHashMap
### JDK 1.7
# 分段锁
Segment 是一种可重入锁（继承ReentrantLock)
每一个Segment 之间读写操作分离，互不影响
简单来说，就是将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一段数据的时候，其他段的数据也能被其他线程访问
默认初始容量大小是16、并发度是16，可以同时允许16个线程操作16个Segment，而且还是线程安全的

# 并发读写
不同Segment的写入是可以并发执行的
同一Segment的写和读是可以并发执行的
Segment的写入是需要上锁的，因此对同一Segment的并发写入会被阻塞

# HashEntry：
final int hash;
final K key;
volatile V value;
volatile HashEntry<K,V> next;

# put()：
1、为输入的Key做Hash运算，得到hash值
2、通过hash值，定位到对应的Segment对象
3、获取可重入锁
4、再次通过hash值，定位到Segment中HashEntry[]数组的具体位置
5、覆盖或创建新的HashEntry对象
6、释放锁

# get()：
1、为输入的Key做Hash运算，得到hash值
2、通过hash值，定位到对应的Segment对象
3、再次通过hash值，定位到Segment当中数组的具体位置

# size()：
问题：
在计算size的时候，还在并发的插入数据，可能会导致计算出来的size和你实际的size有相差（在你return size的时候，插入了多个数据）
解决方案：
使用不加锁的模式去尝试多次计算ConcurrentHashMap的size，最多三次，比较前后两次计算的结果，结果一致就认为当前没有元素加入，计算的结果是准确的
如果第一种方案不符合，他就会给每个Segment加上锁，然后计算ConcurrentHashMap的size返回

### JDK 1.8
①：抛弃了原有的 Segment 分段锁，而采用了 CAS + synchronized 来保证并发安全性
②：把HashEntry改成了Node，但是作用不变，把值和next采用了volatile修饰，保证了可见性
③：引入了红黑树，在链表大于 8 （默认值）的时候会转换
# 主要常量：
DEFAULT_CAPACITY = 16; //默认初始容量，必须是2的幂数
TREEIFY_THRESHOLD = 8; //链表元素大于8，，转红黑树
UNTREEIFY_THRESHOLD = 6; //红黑树元素小于6，转链表
MIN_TREEIFY_CAPACITY = 64; //转红黑树的前提是，Map总元素大于64；小于64但有链表元素大于8的情况，扩容增加Node数组大小
## 主要属性：
Node<K,V>[] table;
## 主要内部类：
# Node<K,V>：一个键值对对应一个Node
final int hash;
final K key;
volatile V val;
volatile Node<K,V> next; //形成链表结构
# TreeNode<K,V> extends Node<K,V> ：树节点
TreeNode<K,V> parent;
TreeNode<K,V> left;
TreeNode<K,V> right;
TreeNode<K,V> prev;

# put()：
public V put(K key, V value) {
        return putVal(key, value, false);
    }

/** Implementation for put and putIfAbsent */
final V putVal(K key, V value, boolean onlyIfAbsent) {
    // 不允许键值为null
    if (key == null || value == null) throw new NullPointerException();

    // 计算key的hash值
    int hash = spread(key.hashCode());
    // 用于记录相应链表的长度
    int binCount = 0;

    for (Node<K,V>[] tab = table;;) {
        Node<K,V> f; int n, i, fh;
        // 如果数组为空，进行数组初始化
        if (tab == null || (n = tab.length) == 0)
            tab = initTable();
        // 找该 hash 值对应的数组下标，得到第一个节点 f 并判断是否为null
        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {
            // 如果为空表示当前位置可以插入数据，利用CAS插入数据，失败则自旋用来保证成功
            if (casTabAt(tab, i, null, new Node<K,V>(hash, key, value, null)))
                break;
        }
        // 如果第一节点位置的hashcode == MOVED == -1,说明需要扩容
        else if ((fh = f.hash) == MOVED)
            tab = helpTransfer(tab, f);
        // 如果都不满足，则利用synchronized写入数据
        else {
            V oldVal = null;
            // 对第一节点加锁
            synchronized (f) {
                if (tabAt(tab, i) == f) {
                    if (fh >= 0) { // hash 值大于 0，说明是链表
                        // 用于累加，记录链表的长度
                        binCount = 1;
                        for (Node<K,V> e = f;; ++binCount) { // 遍历链表
                            K ek;
                            // 比较键的hash、key和equals来判断是否相同键
                            if (e.hash == hash && ((ek = e.key) == key || (ek != null && key.equals(ek)))) {
                                oldVal = e.val;
                                if (!onlyIfAbsent) { // 允许覆盖
                                    e.val = value;
                                }
                                break;
                            }
                            Node<K,V> pred = e;
                            if ((e = e.next) == null) { // 到了链表的最末端，将这个新值放到链表的最后面
                                pred.next = new Node<K,V>(hash, key, value, null);
                                break;
                            }
                        }
                    }
                    else if (f instanceof TreeBin) { // 红黑树
                        Node<K,V> p;
                        binCount = 2;
                        // 红黑树插入新节点
                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key, value)) != null) {
                            oldVal = p.val;
                            if (!onlyIfAbsent)
                                p.val = value;
                        }
                    }
                }
            }
            if (binCount != 0) {
                // 链表转红黑树
                if (binCount >= TREEIFY_THRESHOLD)
                    treeifyBin(tab, i);
                if (oldVal != null)
                    return oldVal;
                break;
            }
        }
    }
    addCount(1L, binCount);
    return null;
}

1、根据 key 计算出 hashcode
2、判断断是否需要进行初始化
3、当前 key的hash值 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功
4、如果当前位置的 hashcode == MOVED == -1,则需要进行扩容
5、如果都不满足，则利用 synchronized 锁写入数据
6、如果数量大于等于 TREEIFY_THRESHOLD 则转换为红黑树
