队列是一种比较特殊的线性结构。它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作。进行插入操作的端称为队尾，进行删除操作的端称为队头。
队列中最先插入的元素也将最先被删除，对应的最后插入的元素将最后被删除。因此队列又称为“先进先出”（FIFO—first in first out）的线性表，与栈(FILO-first in last out)刚好相反。

阻塞队列：
      入列(添加元素)时，如果元素数量超过队列总数，会进行等待（阻塞），待队列的中的元素出列后，元素数量未超过队列总数时，就会解除阻塞状态，进而可以继续入列；
      出列(删除元素)时，如果队列为空的情况下，也会进行等待（阻塞），待队列有值的时候即会解除阻塞状态，进而继续出列；
      阻塞队列的好处是可以防止队列容器溢出；只要满了就会进行阻塞等待；也就不存在溢出的情况；
      只要是阻塞队列，都是线程安全的；


非阻塞队列：
      不管出列还是入列，都不会进行阻塞，
      入列时，如果元素数量超过队列总数，则会抛出异常，
      出列时，如果队列为空，则取出空值；

有界：有界限，大小长度受限制
无界：无限大小，其实说是无限大小，其实是有界限的，只不过超过界限时就会进行扩容，就行ArrayList 一样，在内部动态扩容

单向链表 ： 每个元素中除了元素本身之外，还存储一个指针，这个指针指向下一个元素
双向链表 ：除了元素本身之外，还有两个指针，一个指针指向前一个元素的地址，另一个指针指向后一个元素的地址；


非阻塞队列
1、ConcurrentLinkedQueue
单向链表结构的无界并发队列, 非阻塞队列，由CAS实现线程安全，内部基于节点实现

2、ConcurrentLinkedDeque
双向链表结构的无界并发队列, 非阻塞队列，由CAS实现线程安全

3、PriorityQueue
内部基于数组实现，线程不安全的队列

阻塞队列
1、DelayQueue
一个支持延时获取元素的无界阻塞队列

2、LinkedTransferQueue
一个由链表结构组成的无界阻塞队列。

3、ArrayBlockingQueue
有界队列，阻塞式,初始化时必须指定队列大小，且不可改变；，底层由数组实现；

4、SynchronousQueue
最多只能存储一个元素，每一个put操作必须等待一个take操作，否则不能继续添加元素

5、PriorityBlockingQueue
一个带优先级的队列，而不是先进先出队列。元素按优先级顺序被移除，而且它也是无界的，也就是没有容量上限，虽然此队列逻辑上是无界的，但是由于资源被耗尽，所以试图执行添加操作可能会导致 OutOfMemoryError 错误；
